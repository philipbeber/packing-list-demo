{"version":3,"sources":["model/camp.ts","model/util.ts","model/index.ts","redux/hooks.ts","redux/reducers/campReducer.ts","components/createCamp.tsx","pages/homePage.tsx","redux/selectors/index.ts","pages/campListPage.tsx","pages/campPage.tsx","App.tsx","serviceWorker.ts","redux/reducers/userReducer.ts","redux/store/index.ts","index.tsx","model/item.ts","model/list.ts"],"names":["Camp","id","name","lists","applyOperationToCamp","camp","operation","type","push","List","listId","list","find","l","items","Item","itemId","pl","transformItems","itemIds","item","state","deleted","Error","JSON","stringify","transform","forEach","indexOf","generateId","uuid","createOperation","campId","timestamp","Date","now","createListOperation","createCamp","createList","createItem","changeItemState","changeItemDeleted","useAppDispatch","useDispatch","useSelector","initialState","camps","pendingOperations","campSlice","createSlice","reducers","openCamp","action","selectedCampId","payload","closeCamp","undefined","openCampList","selectedListId","closeCampList","sendUserOperation","newCamp","c","clearCampData","actions","campReducer","reducer","useStyles","makeStyles","theme","textfield","margin","spacing","textAlign","button","CreateCamp","props","classes","onClose","open","React","useState","campName","setCampName","campsDispatch","handleCreate","Dialog","aria-labelledby","maxWidth","p","DialogTitle","Grid","container","xs","TextField","label","value","onChange","e","target","autoFocus","onKeyDown","key","className","Button","variant","color","onClick","disabled","root","flexGrow","menuButton","marginRight","title","campListSelector","createSelector","map","HomePage","campList","createCampOpen","setCreateCampOpen","anchorEl","setAnchorEl","campDispatch","AppBar","position","Toolbar","currentTarget","Menu","keepMounted","Boolean","MenuItem","length","my","component","ListItem","ListItemText","primary","gutterBottom","selectedCampSelector","selectedListSelector","selectedCamp","selectedList","appBarTitle","menuActionButton","marginTop","addItemButton","height","marginLeft","itemStateSelector","actionButton","itemsViewSelector","checkedIds","filter","checked","CampListPage","newItemName","setNewItemName","appbarAnchorEl","setAppbarAnchorEl","setToAnchorEl","setSetToAnchorEl","selectedItems","setSelectedItems","itemsView","handleCreateItem","handleMenuClose","handleBulkChangeItemState","itemState","IconButton","edge","aria-label","aria-controls","aria-haspopup","anchorOrigin","vertical","horizontal","ItemState","Unpurchased","Purchased","PackedIn","PackedOut","Checkbox","event","i","Select","menuAddButton","addListButton","CampPage","createListOpen","setCreateListOpen","newListName","setNewListName","handleCreateList","App","window","location","hostname","match","userSlice","loggedIn","login","logout","userReducer","store","configureStore","user","preloadedState","serializedState","localStorage","getItem","frozeState","parse","version","err","console","warn","loadState","subscribe","_","getState","setItem","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.241ceee6.chunk.js","sourcesContent":["import { Draft } from \"@reduxjs/toolkit\";\nimport { CampOperations } from \"./campOperations\";\nimport { Item } from \"./item\";\nimport { List } from \"./list\";\n\nexport class Camp {\n  constructor(\n    public readonly id: string,\n    public readonly name: string,\n    public readonly lists: List[] = []\n  ) {}\n}\n\nexport function applyOperationToCamp(\n  camp: Draft<Camp>,\n  operation: CampOperations\n) {\n  switch (operation.type) {\n    case \"CREATE_CAMP_LIST\": {\n      camp.lists.push(new List(operation.listId, operation.name));\n      return;\n    }\n    case \"CREATE_CAMP_ITEM\": {\n      const list = camp.lists.find((l) => l.id === operation.listId);\n      if (list) {\n        list.items.push(new Item(operation.itemId, operation.name));\n      }\n      return;\n    }\n    case \"CHANGE_CAMP_ITEM_STATE\": {\n      const pl = operation;\n      return transformItems(camp, pl.listId, pl.itemIds, (item) => {\n        if (item.state !== pl.state) {\n          item.state = pl.state;\n        }\n      });\n    }\n    case \"CHANGE_CAMP_ITEM_DELETED\": {\n      const pl = operation;\n      return transformItems(camp, pl.listId, pl.itemIds, (item) => {\n        if (item.deleted !== pl.deleted) {\n          item.deleted = pl.deleted;;;\n        }\n      });\n    }\n    default: {\n      throw Error(\"Unknown operation \" + JSON.stringify(operation));\n    }\n  }\n}\n\nfunction transformItems(\n  camp: Camp,\n  listId: string,\n  itemIds: string[],\n  transform: (item: Item) => void\n) {\n  const list = camp?.lists.find((l) => l.id === listId);\n  if (!list) {\n    return;\n  }\n  list.items.forEach((item) => {\n    if (itemIds.indexOf(item.id) >= 0) {\n      transform(item);\n    }\n  });\n}\n","import * as uuid from \"short-uuid\";\nimport { Camp } from \"./camp\";\nimport {\n  CampOperation,\n  ChangeCampItemDeletedOperation,\n  ChangeCampItemStateOperation,\n  CreateCampItemOperation,\n  CreateCampListOperation,\n  CreateCampOperation,\n  ListOperation,\n} from \"./campOperations\";\nimport { ItemState } from \"./item\";\n\nexport class User {\n  constructor(public name: string, public camps: Camp[] = []) {}\n}\n\nfunction generateId() {\n  return uuid.generate();\n}\n\nfunction createOperation(campId: string): CampOperation {\n  return {\n    id: generateId(),\n    timestamp: Date.now(),\n    campId,\n  };\n}\n\nfunction createListOperation(campId: string, listId: string): ListOperation {\n  return {\n    ...createOperation(campId),\n    listId,\n  };\n}\n\nexport function createCamp(name: string): CreateCampOperation {\n  return {\n    ...createOperation(generateId()),\n    type: \"CREATE_CAMP\",\n    name,\n  };\n}\n\nexport function createList(\n  campId: string,\n  name: string\n): CreateCampListOperation {\n  return {\n    ...createListOperation(campId, generateId()),\n    type: \"CREATE_CAMP_LIST\",\n    name,\n  };\n}\n\nexport function createItem(\n  campId: string,\n  listId: string,\n  name: string\n): CreateCampItemOperation {\n  return {\n    ...createListOperation(campId, listId),\n    type: \"CREATE_CAMP_ITEM\",\n    itemId: generateId(),\n    name,\n  };\n}\n\nexport function changeItemState(\n  campId: string,\n  listId: string,\n  itemIds: string[],\n  state: ItemState\n): ChangeCampItemStateOperation {\n  return {\n    ...createListOperation(campId, listId),\n    type: \"CHANGE_CAMP_ITEM_STATE\",\n    itemIds,\n    state,\n  };\n}\n\nexport function changeItemDeleted(\n  campId: string,\n  listId: string,\n  itemIds: string[],\n  deleted: boolean\n): ChangeCampItemDeletedOperation {\n  return {\n    ...createListOperation(campId, listId),\n    type: \"CHANGE_CAMP_ITEM_DELETED\",\n    itemIds,\n    deleted,\n  };\n}\n","export * from \"./campOperations\";\nexport * from \"./camp\";\nexport * from \"./list\";\nexport * from \"./item\";\nexport * from \"./util\";\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { applyOperationToCamp, Camp, CampOperations } from \"../../model\";\n\ninterface CampState {\n  selectedCampId?: string;\n  selectedListId?: string;\n  camps: Camp[];\n  pendingOperations: CampOperations[];\n}\nexport const initialState: CampState = {\n  camps: [],\n  pendingOperations: []\n};\n\nconst campSlice = createSlice({\n  name: \"camp\",\n  initialState,\n  reducers: {\n    openCamp(state, action: PayloadAction<string>) {\n      state.selectedCampId = action.payload;\n    },\n    closeCamp(state) {\n      state.selectedCampId = undefined;\n    },\n    openCampList(\n      state,\n      action: PayloadAction<{\n        campId: string;\n        listId: string;\n      }>\n    ) {\n      state.selectedListId = action.payload.listId;\n    },\n    closeCampList(state) {\n      state.selectedListId = undefined;\n    },\n    sendUserOperation(state, action: PayloadAction<CampOperations>) {\n      // I.e. an operation that will also be queued and sent to the server\n      const operation = action.payload;\n      state.pendingOperations.push(operation);\n      if (operation.type === \"CREATE_CAMP\") {\n        const newCamp = new Camp(operation.campId, operation.name);\n        state.selectedCampId = operation.campId;\n        state.camps.push(newCamp);\n      } else {\n        const camp = state.camps.find((c) => c.id === operation.campId);\n        if (camp) {\n          applyOperationToCamp(camp, operation);\n        }\n        return;\n      }\n    },\n    clearCampData() {\n      return initialState;\n    }\n  }\n});\n\n// Extract the action creators object and the reducer\nconst { actions, reducer: campReducer } = campSlice;\nexport const {\n  openCamp,\n  closeCamp,\n  //openCampList,\n  closeCampList,\n  sendUserOperation,\n  clearCampData\n} = actions;\nexport const openCampList = (campId: string, listId: string) =>\n  actions.openCampList({ campId, listId });\n// Export the reducer, either as a default or named export\nexport default campReducer;\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  Grid,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport { createCamp } from \"../model\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport { sendUserOperation } from \"../redux/reducers/campReducer\";\n\nconst useStyles = makeStyles((theme) => ({\n  textfield: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n}));\n\ninterface CreateCampProps {\n  onClose: () => void;\n  open: boolean;\n}\n\nconst CreateCamp: React.FC<CreateCampProps> = (props) => {\n  const classes = useStyles();\n  const { onClose, open } = props;\n  const [campName, setCampName] = React.useState(\"\");\n  const campsDispatch = useAppDispatch();\n\n  const handleCreate = () => {\n    campsDispatch(sendUserOperation(createCamp(campName)));\n    setCampName(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog\n      onClose={() => onClose()}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n      maxWidth=\"xs\"\n    >\n      <Box p={4}>\n        <DialogTitle id=\"simple-dialog-title\">Create a camp</DialogTitle>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              label=\"Camp name\"\n              value={campName}\n              onChange={(e) => setCampName(e.target.value)}\n              autoFocus\n              onKeyDown={(e) => {\n                if (campName && e.key === \"Enter\") {\n                  handleCreate();\n                }\n              }}\n              className={classes.textfield}\n            />\n          </Grid>\n          <Grid item xs=\"auto\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleCreate}\n              disabled={!campName}\n              className={classes.button}\n            >\n              Create\n            </Button>\n          </Grid>\n          <Grid item xs=\"auto\">\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                setCampName(\"\");\n                onClose();\n              }}\n              className={classes.button}\n            >\n              Cancel\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Dialog>\n  );\n};\n\nexport default CreateCamp;\n","import React, { Fragment } from \"react\";\nimport * as Icons from \"@material-ui/icons\";\nimport Box from \"@material-ui/core/Box/Box\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  AppBar,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Toolbar\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../redux/store\";\nimport CreateCamp from \"../components/createCamp\";\nimport { createSelector } from \"reselect\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport { clearCampData, openCamp } from \"../redux/reducers/campReducer\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst campListSelector = createSelector(\n  (state: AppState) => state.camp.camps,\n  (camps) =>\n    camps.map((camp) => ({\n      id: camp.id,\n      name: camp.name\n    }))\n);\n\nconst HomePage: React.FC = () => {\n  const classes = useStyles();\n  const campList = useSelector((state: AppState) => campListSelector(state));\n  const [createCampOpen, setCreateCampOpen] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const campDispatch = useAppDispatch();\n\n  return (\n    <Container maxWidth=\"sm\">\n      <CreateCamp\n        open={createCampOpen}\n        onClose={() => setCreateCampOpen(false)}\n      />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Home\n          </Typography>\n          <Button\n            color=\"inherit\"\n            onClick={(e) => {\n              setAnchorEl(e.currentTarget);\n            }}\n          >\n            <Icons.Add />\n          </Button>\n          <Menu\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={() => setAnchorEl(null)}\n          >\n            <MenuItem\n              onClick={() => {\n                setCreateCampOpen(true);\n                setAnchorEl(null);\n              }}\n            >\n              Create a camp\n            </MenuItem>\n            <MenuItem disabled>Join a camp</MenuItem>\n            <MenuItem disabled>Create a private list</MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n\n      {!campList.length ? (\n        <Box my={2}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Let's get started!\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setCreateCampOpen(true)}\n              >\n                Create a camp\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setCreateCampOpen(true)}\n                disabled\n              >\n                Join a camp\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setCreateCampOpen(true)}\n                disabled\n              >\n                Create a private list\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      ) : (\n        <Fragment>\n          <Box my={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Camps\n            </Typography>\n            <List component=\"div\">\n              {campList.map((camp) => (\n                <ListItem\n                  key={camp.id}\n                  button\n                  onClick={() => campDispatch(openCamp(camp.id))}\n                >\n                  <ListItemText primary={camp.name} />\n                </ListItem>\n              ))}\n            </List>\n          </Box>\n          <Box my={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Private lists\n            </Typography>\n            <Typography variant=\"subtitle1\">Coming soon</Typography>\n          </Box>\n          <Box my={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Test area\n            </Typography>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => campDispatch(clearCampData())}\n            >\n              Clear camp data\n            </Button>\n          </Box>\n        </Fragment>\n      )}\n    </Container>\n  );\n};\n\nexport default HomePage;\n","import { createSelector } from \"reselect\";\nimport { AppState } from \"../store\";\n\nexport const selectedCampSelector = createSelector(\n  (state: AppState) => state.camp.camps,\n  (state: AppState) => state.camp.selectedCampId,\n  (camps, selectedCampId) => {\n    return camps.find((c) => c.id === selectedCampId);\n  }\n);\n\nexport const selectedListSelector = createSelector(\n  (state: AppState) => selectedCampSelector(state),\n  (state: AppState) => state.camp.selectedListId,\n  (selectedCamp, selectedList) => {\n    return selectedCamp?.lists.find((l) => l.id === selectedList);\n  }\n);\n","import React, { Fragment } from \"react\";\nimport * as Icons from \"@material-ui/icons\";\nimport Box from \"@material-ui/core/Box/Box\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  AppBar,\n  Checkbox,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Select,\n  TextField,\n  Toolbar\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../redux/store\";\nimport {\n  closeCampList,\n  sendUserOperation\n} from \"../redux/reducers/campReducer\";\nimport {\n  changeItemDeleted,\n  changeItemState,\n  createItem,\n  ItemState\n} from \"../model\";\nimport { createSelector } from \"reselect\";\nimport { selectedCampSelector, selectedListSelector } from \"../redux/selectors\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: -15\n  },\n  appBarTitle: {\n    flexGrow: 1\n  },\n  menuActionButton: {\n    marginRight: -16\n  },\n  title: {\n    marginTop: 10\n  },\n  addItemButton: {\n    height: 32,\n    marginTop: 16,\n    marginLeft: 16\n  },\n  itemStateSelector: {\n    height: 32\n  },\n  actionButton: {\n    marginRight: 6\n  }\n}));\n\nconst itemsViewSelector = createSelector(\n  (state: AppState) => selectedListSelector(state)?.items,\n  (state: AppState, checkedIds: string[]) => checkedIds,\n  (items, checkedIds) =>\n    items\n      ?.filter((item) => !item.deleted)\n      .map((item) => ({\n        ...item,\n        checked: checkedIds.indexOf(item.id) >= 0\n      }))\n);\n\nconst CampListPage: React.FC = () => {\n  const classes = useStyles();\n  const [newItemName, setNewItemName] = React.useState(\"\");\n  const [appbarAnchorEl, setAppbarAnchorEl] =\n    React.useState<null | HTMLElement>(null);\n  const [setToAnchorEl, setSetToAnchorEl] = React.useState<null | HTMLElement>(\n    null\n  );\n  const [selectedItems, setSelectedItems] = React.useState<string[]>([]);\n  const camp = useSelector((state: AppState) => selectedCampSelector(state));\n  const list = useSelector((state: AppState) => selectedListSelector(state));\n  // Add 'checked' property and filter out deleted items\n  const itemsView = useSelector((state: AppState) =>\n    itemsViewSelector(state, selectedItems)\n  );\n\n  const campDispatch = useAppDispatch();\n  if (!camp || !list) {\n    // Assert?\n    return <Fragment></Fragment>;\n  }\n\n  const handleCreateItem = () => {\n    if (!newItemName) {\n      return;\n    }\n    campDispatch(sendUserOperation(createItem(camp.id, list.id, newItemName)));\n    setNewItemName(\"\");\n  };\n\n  const handleSelectAll = () => {\n    setSelectedItems(itemsView?.map((item) => item.id) || []);\n    setAppbarAnchorEl(null);\n  };\n\n  const handleUnselectAll = () => {\n    setSelectedItems([]);\n    setAppbarAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAppbarAnchorEl(null);\n  };\n\n  const handleBulkChangeItemState = (itemState: ItemState) => () => {\n    if (selectedItems.length) {\n      campDispatch(\n        sendUserOperation(\n          changeItemState(camp.id, list.id, selectedItems, itemState)\n        )\n      );\n    }\n    setSelectedItems([]);\n    setSetToAnchorEl(null);\n  };\n\n  const handleBulkDeleteItems = () => {\n    if (selectedItems.length) {\n      campDispatch(\n        sendUserOperation(\n          changeItemDeleted(camp.id, list.id, selectedItems, true)\n        )\n      );\n    }\n    setSelectedItems([]);\n  };\n\n  const handleCheckboxChange =\n    (itemId: string) =>\n    (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n      if (checked) {\n        setSelectedItems([...selectedItems, itemId]);\n      } else {\n        setSelectedItems(selectedItems.filter((i) => i !== itemId));\n      }\n    };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => campDispatch(closeCampList())}\n          >\n            <Icons.ArrowBackIos />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.appBarTitle}>\n            {camp.name}\n          </Typography>\n          <Button\n            color=\"inherit\"\n            aria-controls=\"simple-menu\"\n            aria-haspopup=\"true\"\n            onClick={(e) => {\n              setAppbarAnchorEl(e.currentTarget);\n            }}\n            className={classes.menuActionButton}\n          >\n            <Icons.MoreVert />\n          </Button>\n          <Menu\n            anchorEl={appbarAnchorEl}\n            keepMounted\n            open={Boolean(appbarAnchorEl)}\n            onClose={handleMenuClose}\n          >\n            <MenuItem\n              onClick={handleSelectAll}\n              disabled={selectedItems.length === itemsView?.length}\n            >\n              Select all\n            </MenuItem>\n            <MenuItem\n              onClick={handleUnselectAll}\n              disabled={selectedItems.length === 0}\n            >\n              Unselect all\n            </MenuItem>\n            <MenuItem onClick={handleMenuClose} disabled>\n              Show deleted items\n            </MenuItem>\n            <MenuItem onClick={handleMenuClose} disabled>\n              Assign list to...\n            </MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Typography variant=\"h4\" gutterBottom className={classes.title}>\n        {list.name}\n      </Typography>\n      <Box my={1}>\n        {selectedItems.length === 0 ? (\n          <Box height={48}>\n            <TextField\n              label=\"Add a new item\"\n              value={newItemName}\n              onChange={(e) => setNewItemName(e.target.value)}\n              onKeyDown={(e) => {\n                if (newItemName && e.key === \"Enter\") {\n                  handleCreateItem();\n                }\n              }}\n            />\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              disabled={!newItemName}\n              className={classes.addItemButton}\n              onClick={() => handleCreateItem()}\n            >\n              Add item\n            </Button>\n          </Box>\n        ) : (\n          <Box height={48}>\n            <Button\n              variant=\"outlined\"\n              className={classes.actionButton}\n              onClick={(e) => {\n                setSetToAnchorEl(e.currentTarget);\n              }}\n            >\n              Set to...\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.actionButton}\n              disabled\n            >\n              Assign to...\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleBulkDeleteItems}\n            >\n              Delete\n            </Button>\n            <Menu\n              anchorEl={setToAnchorEl}\n              keepMounted\n              open={Boolean(setToAnchorEl)}\n              onClose={() => setSetToAnchorEl(null)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\"\n              }}\n            >\n              <MenuItem\n                onClick={handleBulkChangeItemState(ItemState.Unpurchased)}\n              >\n                Unpurchased\n              </MenuItem>\n              <MenuItem\n                onClick={handleBulkChangeItemState(ItemState.Purchased)}\n              >\n                Purchased\n              </MenuItem>\n              <MenuItem onClick={handleBulkChangeItemState(ItemState.PackedIn)}>\n                Packed (in)\n              </MenuItem>\n              <MenuItem\n                onClick={handleBulkChangeItemState(ItemState.PackedOut)}\n              >\n                Packed (out)\n              </MenuItem>\n            </Menu>\n          </Box>\n        )}\n        <List component=\"div\">\n          {itemsView?.map((item) => (\n            <ListItem key={item.id}>\n              <Checkbox\n                checked={item.checked}\n                onChange={handleCheckboxChange(item.id)}\n                color=\"primary\"\n              />\n              <ListItemText primary={item.name} />\n              <Select\n                value={item.state}\n                variant=\"outlined\"\n                className={classes.itemStateSelector}\n                onChange={(event) =>\n                  campDispatch(\n                    sendUserOperation(\n                      changeItemState(\n                        camp.id,\n                        list.id,\n                        [item.id],\n                        event.target.value as ItemState\n                      )\n                    )\n                  )\n                }\n              >\n                <MenuItem value={ItemState.Unpurchased}>Unpurchased</MenuItem>\n                <MenuItem value={ItemState.Purchased}>Purchased</MenuItem>\n                <MenuItem value={ItemState.PackedIn}>Packed (In)</MenuItem>\n                <MenuItem value={ItemState.PackedOut}>Packed (Out)</MenuItem>\n              </Select>\n            </ListItem>\n          ))}\n        </List>\n      </Box>\n    </Container>\n  );\n};\n\nexport default CampListPage;\n","import React, { Fragment } from \"react\";\nimport * as Icons from \"@material-ui/icons\";\nimport Box from \"@material-ui/core/Box/Box\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  AppBar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Toolbar\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../redux/store\";\nimport { createList } from \"../model\";\nimport CampListPage from \"./campListPage\";\nimport { selectedCampSelector } from \"../redux/selectors\";\nimport { closeCamp, openCampList, sendUserOperation } from \"../redux/reducers/campReducer\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: -15\n  },\n  appBarTitle: {\n    flexGrow: 1\n  },\n  menuAddButton: {\n    marginRight: -16\n  },\n  title: {\n    marginTop: 10\n  },\n  addListButton: {\n    height: 32,\n    marginTop: 16,\n    marginLeft: 16\n  }\n}));\n\nconst CampPage: React.FC = () => {\n  const classes = useStyles();\n  const [createListOpen, setCreateListOpen] = React.useState(false);\n  const [newListName, setNewListName] = React.useState(\"\");\n  const camp = useSelector((state: AppState) => selectedCampSelector(state));\n  const selectedList = useSelector(\n    (state: AppState) => state.camp.selectedListId\n  );\n\n  const campDispatch = useAppDispatch();\n  if (!camp) {\n    return <Fragment></Fragment>;\n  }\n\n  const handleCreateList = () => {\n    if (!newListName) {\n      return;\n    }\n    campDispatch(sendUserOperation(createList(camp.id, newListName)));\n    setNewListName(\"\");\n  };\n\n  if (selectedList) {\n    return <CampListPage />;\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => campDispatch(closeCamp())}\n          >\n            <Icons.ArrowBackIos />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.appBarTitle}>\n            Home\n          </Typography>\n          {/* <Button color=\"inherit\" className={classes.menuAddButton}>\n            <Icons.Add />\n          </Button> */}\n        </Toolbar>\n      </AppBar>\n      <Typography variant=\"h4\" className={classes.title}>\n        {camp.name}\n      </Typography>\n      <Box my={1}>\n        {!camp.lists.length && !createListOpen ? (\n          <Fragment>\n            <Typography variant=\"h6\">Let's make some lists!</Typography>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => setCreateListOpen(true)}\n            >\n              Create a list\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Typography variant=\"h6\">Lists</Typography>\n            <TextField\n              label=\"Create a new list\"\n              value={newListName}\n              onChange={(e) => setNewListName(e.target.value)}\n              autoFocus={createListOpen}\n              onKeyDown={(e) => {\n                if (newListName && e.key === \"Enter\") {\n                  handleCreateList();\n                }\n              }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!newListName}\n              className={classes.addListButton}\n              onClick={() => handleCreateList()}\n            >\n              Add list\n            </Button>\n            <List component=\"div\">\n              {camp.lists.map((list) => (\n                <ListItem\n                  key={list.id}\n                  button\n                  onClick={() =>\n                    campDispatch(\n                      openCampList(camp.id, list.id)\n                    )\n                  }\n                >\n                  <ListItemText primary={list.name} />\n                </ListItem>\n              ))}\n            </List>\n          </Fragment>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default CampPage;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"./redux/store\";\nimport HomePage from \"./pages/homePage\";\nimport CampPage from \"./pages/campPage\";\nfunction App() {\n  const selectedCampId = useSelector<AppState>(\n    (state) => state.camp.selectedCampId\n  );\n  return <div>{selectedCampId ? <CampPage /> : <HomePage />}</div>;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\ntype UserState = {\n  loggedIn: boolean;\n};\nconst initialState: UserState = {\n  loggedIn: false\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    login(state) {\n      state.loggedIn = true;\n    },\n    logout(state) {\n      state.loggedIn = false;\n    }\n  }\n});\n\n// Extract the action creators object and the reducer\nconst { actions, reducer: userReducer } = userSlice;\nexport const { login, logout } = actions;\n// Export the reducer, either as a default or named export\nexport default userReducer;\n","import * as _ from \"lodash\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport campReducer from \"../reducers/campReducer\";\nimport userReducer from \"../reducers/userReducer\";\nconst version = \"0.2\";\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n    camp: campReducer,\n  },\n  preloadedState: loadState(),\n});\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\ninterface FrozenState {\n  version: string;\n  state: {\n    user: ReturnType<typeof userReducer>;\n    camp: ReturnType<typeof campReducer>;\n  };\n}\n\nstore.subscribe(\n  _.throttle(() => {\n    try {\n      const frozeState: FrozenState = {\n        version,\n        state: store.getState(),\n      };\n      const serializedState = JSON.stringify(frozeState);\n      localStorage.setItem(\"state\", serializedState);\n    } catch {\n      // ignore write errors\n    }\n  }, 1000)\n);\n\nfunction loadState() {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState) {\n      const frozeState = JSON.parse(serializedState) as FrozenState;\n      if (frozeState.version === version) {\n        return frozeState.state;\n      }\n    }\n  } catch (err) {\n    console.warn(err);\n  }\n  return undefined;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum ItemState {\n  Unpurchased,\n  Purchased,\n  PackedIn,\n  PackedOut,\n}\n\nexport class Item {\n  constructor(\n    public id: string,\n    public name: string,\n    public state: ItemState = ItemState.Unpurchased,\n    public deleted: boolean = false\n  ) {}\n}\n","import { Item } from \"./item\";\n\nexport class List {\n  constructor(\n    public id: string,\n    public name: string,\n    public items: Item[] = []\n  ) {}\n}\n"],"sourceRoot":""}